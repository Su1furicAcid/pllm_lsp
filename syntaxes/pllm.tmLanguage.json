{
	"name": "PLLM",
	"scopeName": "source.pllm",
	"fileTypes": [
		"pllm"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#blocks"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.pllm",
					"match": "#.*$"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.pllm",
					"match": "\\b(if|else|for|while|in|return|break|continue)\\b"
				},
				{
					"name": "keyword.other.pllm",
					"match": "\\b(agent|input|output|model|chat|connect|fun)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.pllm",
					"match": "\\b(str|int|float|bool|list|record|union)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.triple.pllm",
					"begin": "\"\"\"",
					"end": "\"\"\""
				},
				{
					"name": "string.quoted.double.pllm",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.pllm",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.pllm",
					"match": "\\b[0-9]+\\b"
				},
				{
					"name": "constant.numeric.float.pllm",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.pllm",
					"match": "="
				},
				{
					"name": "keyword.operator.arithmetic.pllm",
					"match": "[+\\-*/%]"
				},
				{
					"name": "keyword.operator.comparison.pllm",
					"match": "(==|!=|<|>|<=|>=)"
				},
				{
					"name": "keyword.operator.arrow.pllm",
					"match": "->"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "meta.function.declaration.pllm",
					"match": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"captures": {
						"1": {
							"name": "keyword.other.pllm"
						},
						"2": {
							"name": "entity.name.function.pllm"
						}
					}
				},
				{
					"name": "meta.function.call.pllm",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.pllm"
						}
					}
				}
			]
		},
		"blocks": {
			"patterns": [
				{
					"name": "meta.block.agent.pllm",
					"begin": "\\b(agent)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
					"end": "(?=\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						},
						"2": {
							"name": "entity.name.class.pllm"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.block.connect.pllm",
					"begin": "\\b(connect)\\s*:",
					"end": "(?=\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.block.input.pllm",
					"begin": "\\b(input)\\s*:",
					"end": "(?=\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.block.output.pllm",
					"begin": "\\b(output)\\s*:",
					"end": "(?=\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.block.model.pllm",
					"begin": "\\b(model)\\s*:",
					"end": "$",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.block.chat.pllm",
					"begin": "\\b(chat)\\s*(?:([a-zA-Z_][a-zA-Z0-9_]*))?\\s*:",
					"end": "\"\"\"",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.pllm"
						},
						"2": {
							"name": "entity.name.tag.pllm"
						}
					},
					"patterns": [
						{
							"include": "#strings"
						}
					]
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.other.pllm",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		}
	}
}